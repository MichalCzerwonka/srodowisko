CREATE'Y
--### TWORZENIE TABEL ###

CREATE TABLE ADRES (
  id_ADRES INT IDENTITY (1,1) PRIMARY KEY,
	ulica VARCHAR(30) NOT NULL,
	numer_domu CHAR(15) NOT NULL,
	kod_pocztowy CHAR(6),
	miasto VARCHAR(30),
);

CREATE TABLE KLIENT (
id_KLIENT INT IDENTITY (1,1) PRIMARY KEY,
id_ADRES INT CONSTRAINT id_ADRES_fk
FOREIGN KEY(id_ADRES) 
REFERENCES ADRES(id_ADRES),
imie VARCHAR(30) NOT NULL,
nazwisko VARCHAR(30) NOT NULL,
NIP CHAR(13) NOT NULL,
PESEL CHAR(11),
);

CREATE TABLE ADRES_DOCELOWY (
id_ADRES_DOCELOWY INT IDENTITY (1,1) PRIMARY KEY,
imie VARCHAR(30) NOT NULL,
nazwisko VARCHAR(30) NOT NULL,
ulica VARCHAR(30) NOT NULL,
nr_domu CHAR(15) NOT NULL,
miasto VARCHAR(30),
kod_pocztowy CHAR(6) NOT NULL,
);

CREATE TABLE TYP_AUTA (
id_TYP_AUTA INT IDENTITY (1,1) PRIMARY KEY,
typ VARCHAR(30) NOT NULL,
cena_km MONEY NOT NULL,
);


CREATE TABLE AUTOO (
id_AUTOO INT IDENTITY (1,1) PRIMARY KEY, 
id_TYP_AUTA INT CONSTRAINT id_TYP_AUTA_fk 
FOREIGN KEY (id_TYP_AUTA)
REFERENCES TYP_AUTA(id_TYP_AUTA),
marka VARCHAR(30) NOT NULL,
model VARCHAR(30) NOT NULL,
numer_rejestracyjny VARCHAR(15) NOT NULL
);



CREATE TABLE STANOWISKO (
id_STANOWISKO INT IDENTITY (1,1) PRIMARY KEY,
stanowisko VARCHAR(20) NOT NULL,
pensja CHAR(10) NOT NULL,
);


CREATE TABLE FIRMA(
id_FIRMA INT IDENTITY (1,1) PRIMARY KEY,
id_ADRES INT CONSTRAINT id_ADRES_fkk
FOREIGN KEY (id_ADRES)
REFERENCES ADRES(id_ADRES),
nazwa VARCHAR(30) NOT NULL,
wlasciciel VARCHAR(50) NOT NULL,
);


CREATE TABLE PRACOWNIK (
id_PRACOWNIK INT IDENTITY (1,1) PRIMARY KEY,
id_FIRMA INT CONSTRAINT id_FIRMA_fk
FOREIGN KEY (id_FIRMA)
REFERENCES FIRMA(id_FIRMA),
id_STANOWISKO INT CONSTRAINT id_STANOWISKO_fk
FOREIGN KEY (id_STANOWISKO)
REFERENCES STANOWISKO(id_STANOWISKO),
id_ADRES INT CONSTRAINT id_ADRES_fkkk
FOREIGN KEY (id_ADRES)
REFERENCES ADRES(id_ADRES),
imie VARCHAR(30) NOT NULL,
nazwisko VARCHAR(30) NOT NULL,
PESEL CHAR(11),
);


CREATE TABLE FAKTURA (
id_FAKTURA INT IDENTITY (1,1) PRIMARY KEY,
id_KLIENT INT CONSTRAINT id_KLIENT_fk
FOREIGN KEY (id_KLIENT)
REFERENCES KLIENT(id_KLIENT),
id_ADRES_DOCELOWY INT CONSTRAINT id_ADRES_DOCELOWY_fk
FOREIGN KEY (id_ADRES_DOCELOWY)
REFERENCES ADRES_DOCELOWY(id_ADRES_DOCELOWY),
id_PRACOWNIK INT CONSTRAINT id_PRACOWNIK_fk
FOREIGN KEY (id_PRACOWNIK)
REFERENCES PRACOWNIK(id_PRACOWNIK),
cena_netto MONEY NOT NULL,
VAT FLOAT NOT NULL,
cena_brutto MONEY NOT NULL, 
data_uslugi DATETIME NOT NULL,
dystans_km FLOAT NOT NULL,
);


CREATE TABLE ZAMOWIENIE (
id_ZAMOWIENIE INT IDENTITY (1,1) PRIMARY KEY,
id_FAKTURA INT CONSTRAINT id_FAKTURA_fk
FOREIGN KEY (id_FAKTURA)
REFERENCES FAKTURA(id_FAKTURA),
id_AUTOO INT CONSTRAINT id_AUTOO_fk
FOREIGN KEY (id_AUTOO)
REFERENCES AUTOO(id_AUTOO),
cena_osoba MONEY NOT NULL,
ilosc_osob INTEGER NOT NULL,
);


drop table ZAMOWIENIE;
drop table FAKTURA;
drop table PRACOWNIK;
drop table FIRMA;
drop table STANOWISKO;
drop table AUTOO;
drop table TYP_AUTA;
drop table ADRES_DOCELOWY;
drop table KLIENT;
drop table ADRES;




INSERT'Y

--### WPISYWANIE DANYCH ###

--TABELA ADRES--
INSERT INTO ADRES VALUES ('Dluga', '32', '31-867', 'Krakow');
INSERT INTO ADRES VALUES ('Kochanowskiego', '345', '80-206', 'Gdansk');
INSERT INTO ADRES VALUES ('Reja', '4', '10-118', 'Olsztyn');
INSERT INTO ADRES VALUES ('Kartuska', '584', '81-36', 'Gdynia');
INSERT INTO ADRES VALUES ('Mariacka', '72', '02-495', 'Warszawa');

--TABELA KLIENT--
INSERT INTO KLIENT VALUES (1, 'Jan', 'Kowalski', '564-855-54-42', '88052746688');
INSERT INTO KLIENT VALUES (2, 'Katarzyna', 'Nowacka', '897-547-5-88', '79030478944');
INSERT INTO KLIENT VALUES (5,'Teresa', 'Nowak', '725-462-54-77', '64100945388');
INSERT INTO KLIENT VALUES (2,'Maciej', 'Bretes', '325-462-56-45', '86072095435');
INSERT INTO KLIENT VALUES (3,'Piotr', 'Kowalczyk', '651-457-65-78', '55112464721');

--TABELA ADRES_DOCELOWY-
INSERT INTO ADRES_DOCELOWY VALUES ('Krystian', 'Kaczmarczyk', 'Sobieskiego', '45', 'Olsztyn', '10-118');
INSERT INTO ADRES_DOCELOWY VALUES ('Aleksandra', 'Kaczmarek', 'Polska', '53', 'Wroclaw', '51-674');
INSERT INTO ADRES_DOCELOWY VALUES ('Krzysztof', 'Krawczyk', 'Krotka', '343', 'Rzeszow', '35-020');
INSERT INTO ADRES_DOCELOWY VALUES ('Maciej', 'Bretes', 'Poprzeczna', '23', 'Radom', '26-605');
INSERT INTO ADRES_DOCELOWY VALUES ('Katarzyna', 'Nowacka', 'Reja', '312', 'Szczytno', '12-100');

--TABELA TYP_AUTA --
INSERT INTO TYP_AUTA VALUES ('dostawczy', '2.5');
INSERT INTO TYP_AUTA VALUES ('dostawczy', '2');
INSERT INTO TYP_AUTA VALUES ('bus', '2');
INSERT INTO TYP_AUTA VALUES ('osobowy', '2');
INSERT INTO TYP_AUTA VALUES ('osobowy', '1');

--TABELA AUTOO--
INSERT INTO AUTOO VALUES (1,'Fiat', 'Ducato', 'WPZ478Y3');
INSERT INTO AUTOO VALUES (2,'Volkswagen', 'Transporter', 'NSZ356Y7');
INSERT INTO AUTOO VALUES (3,'Renault', 'Trafic', 'WRZ48398');
INSERT INTO AUTOO VALUES (4,'Toyota', 'Corolla Verso', 'GWE23092');
INSERT INTO AUTOO VALUES (5,'Audi', 'A3', 'GDA39821');

--TABELA STANOWISKO--
INSERT INTO STANOWISKO VALUES ('kierowca', '2000');
INSERT INTO STANOWISKO VALUES ('ksiegowy', '3000');
INSERT INTO STANOWISKO VALUES ('manager', '3000');
INSERT INTO STANOWISKO VALUES ('kucharz', '3500');
INSERT INTO STANOWISKO VALUES ('pomocnik_kucharza', '2700');

--TABELA FIRMA--
INSERT INTO FIRMA VALUES (3,'Tanie_Szamanie', 'Krzysztof Kowalski');
INSERT INTO FIRMA VALUES (5,'Kmar', 'Joanna Klepacka');
INSERT INTO FIRMA VALUES (1,'Catering', 'Roman Ciemny');
INSERT INTO FIRMA VALUES (4,'C&K', 'Katarzyna Maj');
INSERT INTO FIRMA VALUES (2,'G&J', 'Adrian Cichy');

--TABELA PRACOWNIK--
INSERT INTO PRACOWNIK VALUES (1,5,3,'Jan', 'Kowalski', '85096215888');
INSERT INTO PRACOWNIK VALUES (2,1,1,'Maria', 'Sklodowska', '74030487564');
INSERT INTO PRACOWNIK VALUES (3,2,4,'Marian', 'Nowak', '79200598632');
INSERT INTO PRACOWNIK VALUES (4,1,5,'Katarzyna', 'Sokolowska', '55060254568');
INSERT INTO PRACOWNIK VALUES (5,5,2,'Andrzej', 'Sztuczny', '72030656844');

--TABELA FAKTURA--
INSERT INTO FAKTURA VALUES (1,5,2,10000,0.23,1000*1.23,'2010-01-03','100');
INSERT INTO FAKTURA VALUES (3,2,3,200,0.23,200*1.23,'2012-09-07','23');
INSERT INTO FAKTURA VALUES (3,2,2,4500,0.23,45000*1.23,'2013-01-07','213');
INSERT INTO FAKTURA VALUES (1,3,1,3000,0.23,3000*1.23,'2012-07-02','157');
INSERT INTO FAKTURA VALUES (1,5,1,24000,0.23,24000*1.23,'2013-04-12','100');
INSERT INTO FAKTURA VALUES (4,3,2,2500,0.23,2500*1.23,'2011-01-12','102');
INSERT INTO FAKTURA VALUES (5,3,4,24000,0.23,24000*1.23,'2012-04-07','44');
INSERT INTO FAKTURA VALUES (5,1,3,1600,0.23,1600*1.23,'2011-03-10','50');

--TABELA ZAMOWIENIE--
INSERT INTO ZAMOWIENIE VALUES (1,2,'80','300');
INSERT INTO ZAMOWIENIE VALUES (5,1,'30','1000');
INSERT INTO ZAMOWIENIE VALUES (1,4,'150','20');
INSERT INTO ZAMOWIENIE VALUES (1,4,'30','80');
INSERT INTO ZAMOWIENIE VALUES (1,1,'55','60');
INSERT INTO ZAMOWIENIE VALUES (2,3,'20','60');
INSERT INTO ZAMOWIENIE VALUES (3,4,'50','40');
INSERT INTO ZAMOWIENIE VALUES (3,5,'30','120');




SELECTY
--FAKTURY WYSTAWIONE DLA KLIENTOW--
SELECT k.imie, k.nazwisko, ad.imie, ad.nazwisko, ad.ulica, ad.nr_domu, ad.miasto, f.dystans_km, f.cena_brutto
FROM KLIENT k JOIN FAKTURA f ON k.id_KLIENT=f.id_KLIENT
JOIN ADRES_DOCELOWY ad ON ad.id_ADRES_DOCELOWY=f.id_ADRES_DOCELOWY
ORDER BY k.nazwisko, k.imie;

--RODZAJE AUT W FIRMIE--
SELECT a.marka, a.model, a.numer_rejestracyjny, t.typ, t.cena_km
FROM AUTOO a JOIN TYP_AUTA t ON a.id_TYP_AUTA=t.id_TYP_AUTA
ORDER BY a.marka, a.model;

--MIEJSCA, W KTÓRYCH PRACUJĄ PRACOWNICY--
SELECT p.imie, p.nazwisko, a.ulica, a.numer_domu, a.kod_pocztowy, f.nazwa
FROM PRACOWNIK p JOIN FIRMA f ON p.ID_FIRMA=f.ID_FIRMA
JOIN ADRES a ON f.ID_FIRMA=a.ID_ADRES
ORDER BY p.imie, p.nazwisko;

--ADRESY ZAMIESZKANIA KLIENTÓW--
SELECT k.imie, k.nazwisko, a.ulica, a.numer_domu, a.miasto
FROM KLIENT k JOIN ADRES a ON k.ID_ADRES=a.ID_ADRES
ORDER BY k.IMIE, k.NAZWISKO;

--KWOTA FAKTUR WYSTAWIONYCH DLA POSZCZEGÓLNYCH KLIENTÓW--
SELECT k.imie, k.nazwisko, F.cena_brutto
FROM KLIENT k LEFT JOIN FAKTURA f
ON k.ID_KLIENT=f.ID_KLIENT
GROUP BY k.imie, k.nazwisko,f.cena_brutto
ORDER BY cena_brutto DESC;

--Znajduje klientów, którym conajmniej dwa razy została wystawiona faktura.
--Wyświetla imię i nazwisko klienta oraz ilosc wystawionych dla niego faktur
--posortowanych malejąco.
SELECT k.imie, k.nazwisko, COUNT(f.id_KLIENT) AS ilosc_faktur
FROM KLIENT k LEFT JOIN FAKTURA f ON k.id_KLIENT=f.id_KLIENT
GROUP BY k.imie, k.nazwisko, k.id_KLIENT
HAVING COUNT(f.id_klient)>=2
ORDER BY COUNT (f.id_klient)DESC;

--Wyświetla sumę oraz średnią sumę faktur wystawionych dla poszczególnych klientów
--sortując je malejąco względem sumy.
SELECT k.nazwisko, k.imie, AVG(f.cena_brutto) AS "srednia", 
COALESCE(SUM(f.cena_brutto),0) AS "suma"
FROM KLIENT k LEFT JOIN FAKTURA f
ON k.id_KLIENT=f.id_KLIENT
GROUP BY k.nazwisko, k.imie
ORDER BY suma DESC;

--Wyswietla ile dni temu została wykonana usługa wobec różnych klientów,
--sortując wynik malejąco względem ilości dni.
SELECT k.imie, k.nazwisko, DATEDIFF(d,f.data_uslugi,GETDATE()) AS ile_dni_temu
FROM KLIENT k LEFT JOIN FAKTURA f
ON k.id_KLIENT=f.id_KLIENT
ORDER BY ile_dni_temu DESC;

--Wyświetla imię, nazwisko oraz ID pracownika, który wystawił największą ilość faktur.
--Dodatkowo wyświetla ile tych faktur było.
SELECT p.id_PRACOWNIK, p.nazwisko, p.imie, COUNT(f.id_pracownik) as ilosc
FROM PRACOWNIK p JOIN FAKTURA f 
ON p.id_PRACOWNIK=f.id_PRACOWNIK
GROUP BY p.id_PRACOWNIK, p.imie, p.nazwisko
HAVING COUNT(f.id_pracownik)=
(
SELECT TOP 1 COUNT (f.id_pracownik) AS ilosc
FROM FAKTURA f 
GROUP BY f.id_PRACOWNIK
ORDER BY ilosc DESC
)

--WYPISUJE MARKĘ, MODEL ORAZ ID SAMOCHODU KTÓRY NAJCZĘŚCIEJ BYŁ UŻYWANY DO ZAMÓWIEŃ.
--DODATKOWO WYPISUJE ILOŚĆ ZREALIZOWANYCH ZAMÓWIEŃ.

SELECT a.ID_AUTOO, a.marka, a.model, COUNT(z.id_autoo) AS ile
FROM AUTOO a JOIN ZAMOWIENIE z ON a.id_AUTOO=z.id_AUTOO
GROUP BY a.id_AUTOO, a.marka, a.model
HAVING COUNT(z.id_AUTOO)=
(
SELECT TOP 1 COUNT(z.id_AUTOO) AS ile
FROM ZAMOWIENIE z
GROUP BY z.id_AUTOO
ORDER BY ile DESC
)
ORDER BY a.marka ASC, a.model ASC;



WIDOKI

1.
---WYŚWIETLA NAZWĘ STANOWISKA NA KTÓRYM OBSADZONY JEST WIĘCEJ NIŻ JEDEN PRACOWNIK
--ORAZ ILOŚĆ PRACOWNIKÓW ZAJMUJĄCYCH DANE STANOWISKO
--POSORTOWANYCH MALEJĄCO WZGLĘDEM ILOŚCI PRACOWNIKÓW.
IF EXISTS (SELECT * FROM sys.views WHERE name='PRACOWNICY')
DROP VIEW PRACOWNICY;
GO

CREATE VIEW PRACOWNICY
AS 
SELECT s.stanowisko, COUNT(p.id_PRACOWNIK) AS ilosc
FROM PRACOWNIK p JOIN STANOWISKO s
ON p.id_STANOWISKO=s.id_STANOWISKO
GROUP BY s.stanowisko
HAVING COUNT (p.id_STANOWISKO)>1
GO

SELECT ilosc, stanowisko
FROM PRACOWNICY
ORDER BY ilosc DESC;
GO


--WIDOK KTÓRY POKAZUJE ILE KURSÓW WYKONAŁY SAMOCHODY W FIRMIE. WYŚWIETLA MARKĘ I MODEL 
--SAMOCHODU, ORAZ GRUPUJE JE MALEJĄCO WZGLĘDEM WYKONANYCH KURSÓW.
--SELECT+CASE SPRAWDZA CZY ZAPOTRZEBOWANIE W FIRMIE NA DANE AUTO JEST DUŻE, CZY NIE.
--DLACZEGO NIETRYWIALNE: WIDOK JEST PRZYDATNY, PONIEWAŻ POZWALA OSOBOM ZARZĄDZAJĄCYCH FIRMĄ
--ZORIENTOWAĆ SIĘ KTÓRE AUTA EWENTUALNIE WARTO DOKUPIĆ, A NA KTÓRE JEST MAŁE ZAPOTRZEBOWANIE.
IF EXISTS (SELECT * FROM sys.views WHERE name='SAMOCHODY')
DROP VIEW SAMOCHODY;
GO

CREATE VIEW SAMOCHODY
AS
SELECT a.marka, a.model, COUNT(z.id_AUTOO) AS ilosc_kursow
FROM AUTOO a JOIN ZAMOWIENIE z
ON a.id_AUTOO=z.id_AUTOO
GROUP BY a.marka, a.model
GO

SELECT CASE WHEN ilosc_kursow>=4 THEN 'DUŻE' ELSE 'MAŁE' END AS 'ZAPOTRZEBOWANIE', *
FROM SAMOCHODY;
